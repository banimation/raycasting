(()=>{"use strict";const t=document.getElementById("canvas").getContext("2d"),s=new Map;class i{constructor(t){this.x=t.x,this.y=t.y,this.h=t.h,this.w=t.w}getAxis(){return{x:this.x+this.w/2,y:this.y+this.h/2}}getLine(){return[new y({x:this.x,y:this.y},{x:this.x,y:this.y+this.h}),new y({x:this.x,y:this.y+this.h},{x:this.x+this.w,y:this.y+this.h}),new y({x:this.x+this.w,y:this.y+this.h},{x:this.x+this.w,y:this.y}),new y({x:this.x+this.w,y:this.y},{x:this.x,y:this.y})]}}class h extends i{constructor(t){super(t)}create(){t.save(),t.fillStyle="black",t.fillRect(this.x,this.y,this.w,this.h),t.font="20px sans-serif",t.textAlign="left",t.restore()}}class e extends i{constructor(t){super(t)}create(){t.fillStyle="black",t.fillRect(this.x,this.y,this.w,this.h),n.rectVertexes.push({x:this.x,y:this.y},{x:this.x,y:this.y+this.h},{x:this.x+this.w,y:this.y+this.h},{x:this.x+this.w,y:this.y}),n.rectLines.push(new y({x:this.x,y:this.y},{x:this.x,y:this.y+this.h}),new y({x:this.x,y:this.y+this.h},{x:this.x+this.w,y:this.y+this.h}),new y({x:this.x+this.w,y:this.y+this.h},{x:this.x+this.w,y:this.y}),new y({x:this.x+this.w,y:this.y},{x:this.x,y:this.y})),s.set(this,this)}}class x{constructor(t,s,i){this.from=t,this.to=s,this.color=i}create(){t.strokeStyle=this.color,t.beginPath(),t.moveTo(this.from.x,this.from.y),t.lineTo(this.to.x,this.to.y),t.stroke()}}class y{constructor(t,s){this.x1=t.x,this.y1=t.y,this.x2=s.x,this.y2=s.y}}class n{static init(){new e({x:50,y:100,w:100,h:300}).create(),new e({x:200,y:500,w:400,h:100}).create(),new e({x:500,y:300,w:100,h:100}).create(),new e({x:200,y:100,w:50,h:50}).create(),new e({x:300,y:100,w:50,h:50}).create(),new e({x:400,y:100,w:50,h:50}).create();const t=new h({x:300,y:300,w:50,h:50});t.create(),function(t,s,i){n.rayPoints=[];let h={x:t.getAxis().x,y:t.getAxis().y-400},e={x:t.getAxis().x,y:t.getAxis().y-400};for(let i=0;i<360/s;i++){for(let s=0;s<n.rectLines.length;s++){const i=t.getAxis().x,x=t.getAxis().y,y=h.x,r=h.y,c=n.rectLines[s].x1,o=n.rectLines[s].y1,a=n.rectLines[s].x2,w=n.rectLines[s].y2,l=(y-i)*(w-o)-(a-c)*(r-x);if(0===l)continue;const g=1/l*((o-w)*(c-i)+(a-c)*(o-x))*-1,A=1/l*((x-r)*(c-i)+(y-i)*(o-x))*-1;if(g<1&&g>0&&A<1&&A>0){const s=i+(y-i)*g,h=x+(r-x)*g;Math.pow(e.x-t.getAxis().x,2)+Math.pow(e.y-t.getAxis().y,2)>Math.pow(s-t.getAxis().x,2)+Math.pow(h-t.getAxis().y,2)&&(e.x=s,e.y=h)}}n.rayPoints.push({x:e.x,y:e.y});const i={x:(h.x-t.getAxis().x)*Math.cos(s*Math.PI/180)-(h.y-t.getAxis().y)*Math.sin(s*Math.PI/180)+t.getAxis().x,y:(h.x-t.getAxis().x)*Math.sin(s*Math.PI/180)+(h.y-t.getAxis().y)*Math.cos(s*Math.PI/180)+t.getAxis().y};h=i,e.x=i.x,e.y=i.y}}(t,n.rotateAngle);for(let s=0;s<360/n.rotateAngle;s++)new x({x:t.getAxis().x,y:t.getAxis().y},{x:n.rayPoints[s].x,y:n.rayPoints[s].y},"red").create()}}n.rectLines=[],n.rectVertexes=[],n.rayPoints=[],n.rotateAngle=.5,n.init()})();